import { Businessunits } from '.'

let businessunits

beforeEach(async () => {
  businessunits = await Businessunits.create({ companyId: 'test', companyName: 'test', unitName: 'test', shortName: 'test', building: 'test', street: 'test', address: 'test', cityId: 'test', city: 'test', stateId: 'test', state: 'test', countryId: 'test', country: 'test', pinCode: 'test', email: 'test', landline: 'test', mobile: 'test', logo: 'test', gstin: 'test', bankName: 'test', bankBranch: 'test', bankAccNumber: 'test', IFSC: 'test', MICR: 'test', active: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = businessunits.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(businessunits.id)
    expect(view.companyId).toBe(businessunits.companyId)
    expect(view.companyName).toBe(businessunits.companyName)
    expect(view.unitName).toBe(businessunits.unitName)
    expect(view.shortName).toBe(businessunits.shortName)
    expect(view.building).toBe(businessunits.building)
    expect(view.street).toBe(businessunits.street)
    expect(view.address).toBe(businessunits.address)
    expect(view.cityId).toBe(businessunits.cityId)
    expect(view.city).toBe(businessunits.city)
    expect(view.stateId).toBe(businessunits.stateId)
    expect(view.state).toBe(businessunits.state)
    expect(view.countryId).toBe(businessunits.countryId)
    expect(view.country).toBe(businessunits.country)
    expect(view.pinCode).toBe(businessunits.pinCode)
    expect(view.email).toBe(businessunits.email)
    expect(view.landline).toBe(businessunits.landline)
    expect(view.mobile).toBe(businessunits.mobile)
    expect(view.logo).toBe(businessunits.logo)
    expect(view.gstin).toBe(businessunits.gstin)
    expect(view.bankName).toBe(businessunits.bankName)
    expect(view.bankBranch).toBe(businessunits.bankBranch)
    expect(view.bankAccNumber).toBe(businessunits.bankAccNumber)
    expect(view.IFSC).toBe(businessunits.IFSC)
    expect(view.MICR).toBe(businessunits.MICR)
    expect(view.active).toBe(businessunits.active)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = businessunits.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(businessunits.id)
    expect(view.companyId).toBe(businessunits.companyId)
    expect(view.companyName).toBe(businessunits.companyName)
    expect(view.unitName).toBe(businessunits.unitName)
    expect(view.shortName).toBe(businessunits.shortName)
    expect(view.building).toBe(businessunits.building)
    expect(view.street).toBe(businessunits.street)
    expect(view.address).toBe(businessunits.address)
    expect(view.cityId).toBe(businessunits.cityId)
    expect(view.city).toBe(businessunits.city)
    expect(view.stateId).toBe(businessunits.stateId)
    expect(view.state).toBe(businessunits.state)
    expect(view.countryId).toBe(businessunits.countryId)
    expect(view.country).toBe(businessunits.country)
    expect(view.pinCode).toBe(businessunits.pinCode)
    expect(view.email).toBe(businessunits.email)
    expect(view.landline).toBe(businessunits.landline)
    expect(view.mobile).toBe(businessunits.mobile)
    expect(view.logo).toBe(businessunits.logo)
    expect(view.gstin).toBe(businessunits.gstin)
    expect(view.bankName).toBe(businessunits.bankName)
    expect(view.bankBranch).toBe(businessunits.bankBranch)
    expect(view.bankAccNumber).toBe(businessunits.bankAccNumber)
    expect(view.IFSC).toBe(businessunits.IFSC)
    expect(view.MICR).toBe(businessunits.MICR)
    expect(view.active).toBe(businessunits.active)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
