import { Router } from 'express'
import { middleware as query } from 'querymen'
import { middleware as body } from 'bodymen'
import { create, index, show, update, destroy } from './controller'
import { schema } from './model'
export PiCarcase, { schema } from './model'

const router = new Router()
const {
  piId,
  itemNo,
  categoryCodeId,
  moduleVariantId,
  code,
  description, image,
  operativeFactorId,
  factor,
  mechanism,
  psfFactoryRate,
  psfRate,
  ppBaseFactoryRate,
  ppBackFactoryRate,
  ppBaseRate,
  ppBackRate,
  billingUnit,
  stdWidth,
  widthPlus,
  shelfRate,
  splBackPlus,
  drwHeight,
  drwHTPlus,
  drawerUnit,
  drwRate600,
  drwRate900,
  drwRate1200,
  stripRate,
  drwBillingUnit,
  stripUnit,
  hlPlus,
  rawBoard,
  stripWidth,
  baseThickness,
  backThickness,
  lamination,
  laminationType,
  edging,
  FEBMaterialId,
  BEBMaterialId,
  EBMakeId,
  FEBSKUId,
  FEBSKU,
  BEBSKUId,
  BEBSKU,
  FEBThickness,
  BEBThickness,
  baseMaterialId,
  baseMakeId,
  baseMaterialThickness,
  baseSKUId,
  baseSKU,
  backMaterialId,
  backMakeId,
  backMaterialThickness,
  backSKUId,
  backSKU,
  finishMaterialId,
  finishMakeId,
  finishMaterialThickness,
  finishSKUId,
  finishSKU,
  shadeSwatchId,
  shadeSwatch,
  EBSwatchId,
  EBSwatch,
  handleLess,
  handleLessWall,
  glassMaterialId,
  glassMakeId,
  glassMaterialThickness,
  glassSKUId,
  glassSKU,
  ohpAdj,
  sideAdj

} = schema.tree

router.post(
  '/',
  body({
    piId,
    itemNo,
    categoryCodeId,
    moduleVariantId,
    code,
    description,
    image,
    operativeFactorId,
    factor,
    mechanism,
    psfFactoryRate,
    psfRate,
    ppBaseFactoryRate,
    ppBackFactoryRate,
    ppBaseRate,
    ppBackRate,
    billingUnit,
    stdWidth,
    widthPlus,
    shelfRate,
    splBackPlus,
    drwHeight,
    drwHTPlus,
    drawerUnit,
    drwRate600,
    drwRate900,
    drwRate1200,
    stripRate,
    drwBillingUnit,
    stripUnit,
    hlPlus,
    rawBoard,
    stripWidth,
    baseThickness,
    backThickness,
    lamination,
    laminationType,
    edging,
    FEBMaterialId,
    BEBMaterialId,
    EBMakeId,
    FEBSKUId,
    FEBSKU,
    BEBSKUId,
    BEBSKU,
    FEBThickness,
    BEBThickness,
    baseMaterialId,
    baseMakeId,
    baseMaterialThickness,
    baseSKUId,
    baseSKU,
    backMaterialId,
    backMakeId,
    backMaterialThickness,
    backSKUId,
    backSKU,
    finishMaterialId,
    finishMakeId,
    finishMaterialThickness,
    finishSKUId,
    finishSKU,
    shadeSwatchId,
    shadeSwatch,
    EBSwatchId,
    EBSwatch,
    handleLess,
    handleLessWall,
    glassMaterialId,
    glassMakeId,
    glassMaterialThickness,
    glassSKUId,
    glassSKU,
    ohpAdj,
    sideAdj

  }),
  create
)

router.get('/', query(), index)

router.get('/:id', show)

router.put(
  '/:id',
  body({
    piId,
    itemNo,
    categoryCodeId,
    moduleVariantId,
    code,
    description,
    image,
    operativeFactorId,
    factor,
    mechanism,
    psfFactoryRate,
    psfRate,
    ppBaseFactoryRate,
    ppBackFactoryRate,
    ppBaseRate,
    ppBackRate,
    billingUnit,
    stdWidth,
    widthPlus,
    shelfRate,
    splBackPlus,
    drwHeight,
    drwHTPlus,
    drawerUnit,
    drwRate600,
    drwRate900,
    drwRate1200,
    stripRate,
    drwBillingUnit,
    stripUnit,
    hlPlus,
    rawBoard,
    stripWidth,
    baseThickness,
    backThickness,
    lamination,
    laminationType,
    edging,
    FEBMaterialId,
    BEBMaterialId,
    EBMakeId,
    FEBSKUId,
    FEBSKU,
    BEBSKUId,
    BEBSKU,
    FEBThickness,
    BEBThickness,
    baseMaterialId,
    baseMakeId,
    baseMaterialThickness,
    baseSKUId,
    baseSKU,
    backMaterialId,
    backMakeId,
    backMaterialThickness,
    backSKUId,
    backSKU,
    finishMaterialId,
    finishMakeId,
    finishMaterialThickness,
    finishSKUId,
    finishSKU,
    shadeSwatchId,
    shadeSwatch,
    EBSwatchId,
    EBSwatch,
    handleLess,
    handleLessWall,
    glassMaterialId,
    glassMakeId,
    glassMaterialThickness,
    glassSKUId,
    glassSKU,
    ohpAdj,
    sideAdj

  }), update
)

/**
 * @api {delete} /piCarcase/:id Delete pi carcase
 * @apiName DeletePiCarcase
 * @apiGroup PiCarcase
 * @apiSuccess (Success 204) 204 No Content.
 * @apiError 404 Pi carcase not found.
 */
router.delete('/:id', destroy)

export default router
