import { PayrollScroll } from '.'

let payrollScroll

beforeEach(async () => {
  payrollScroll = await PayrollScroll.create({ scrollNo: 'test', partyId: 'test', payGradeId: 'test', payGrade: 'test', partyDetails: 'test', department: 'test', PresentDays: 'test', PaidDays: 'test', CL: 'test', EL: 'test', totaHrsAllowed: 'test', dutyHrs: 'test', weeklyOff: 'test', otHours: 'test', totalIncrements: 'test', IncrementAmount: 'test', scale: 'test', HRADeduction: 'test', HRA: 'test', DA: 'test', SA: 'test', OTA: 'test', EPFEmployee: 'test', EPFEmployer: 'test', loanRecovery: 'test', CTC: 'test', totalDeduction: 'test', netInHand: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = payrollScroll.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(payrollScroll.id)
    expect(view.scrollNo).toBe(payrollScroll.scrollNo)
    expect(view.partyId).toBe(payrollScroll.partyId)
    expect(view.payGradeId).toBe(payrollScroll.payGradeId)
    expect(view.payGrade).toBe(payrollScroll.payGrade)
    expect(view.partyDetails).toBe(payrollScroll.partyDetails)
    expect(view.department).toBe(payrollScroll.department)
    expect(view.PresentDays).toBe(payrollScroll.PresentDays)
    expect(view.PaidDays).toBe(payrollScroll.PaidDays)
    expect(view.CL).toBe(payrollScroll.CL)
    expect(view.EL).toBe(payrollScroll.EL)
    expect(view.totaHrsAllowed).toBe(payrollScroll.totaHrsAllowed)
    expect(view.dutyHrs).toBe(payrollScroll.dutyHrs)
    expect(view.weeklyOff).toBe(payrollScroll.weeklyOff)
    expect(view.otHours).toBe(payrollScroll.otHours)
    expect(view.totalIncrements).toBe(payrollScroll.totalIncrements)
    expect(view.IncrementAmount).toBe(payrollScroll.IncrementAmount)
    expect(view.scale).toBe(payrollScroll.scale)
    expect(view.HRADeduction).toBe(payrollScroll.HRADeduction)
    expect(view.HRA).toBe(payrollScroll.HRA)
    expect(view.DA).toBe(payrollScroll.DA)
    expect(view.SA).toBe(payrollScroll.SA)
    expect(view.OTA).toBe(payrollScroll.OTA)
    expect(view.EPFEmployee).toBe(payrollScroll.EPFEmployee)
    expect(view.EPFEmployer).toBe(payrollScroll.EPFEmployer)
    expect(view.loanRecovery).toBe(payrollScroll.loanRecovery)
    expect(view.CTC).toBe(payrollScroll.CTC)
    expect(view.totalDeduction).toBe(payrollScroll.totalDeduction)
    expect(view.netInHand).toBe(payrollScroll.netInHand)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = payrollScroll.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(payrollScroll.id)
    expect(view.scrollNo).toBe(payrollScroll.scrollNo)
    expect(view.partyId).toBe(payrollScroll.partyId)
    expect(view.payGradeId).toBe(payrollScroll.payGradeId)
    expect(view.payGrade).toBe(payrollScroll.payGrade)
    expect(view.partyDetails).toBe(payrollScroll.partyDetails)
    expect(view.department).toBe(payrollScroll.department)
    expect(view.PresentDays).toBe(payrollScroll.PresentDays)
    expect(view.PaidDays).toBe(payrollScroll.PaidDays)
    expect(view.CL).toBe(payrollScroll.CL)
    expect(view.EL).toBe(payrollScroll.EL)
    expect(view.totaHrsAllowed).toBe(payrollScroll.totaHrsAllowed)
    expect(view.dutyHrs).toBe(payrollScroll.dutyHrs)
    expect(view.weeklyOff).toBe(payrollScroll.weeklyOff)
    expect(view.otHours).toBe(payrollScroll.otHours)
    expect(view.totalIncrements).toBe(payrollScroll.totalIncrements)
    expect(view.IncrementAmount).toBe(payrollScroll.IncrementAmount)
    expect(view.scale).toBe(payrollScroll.scale)
    expect(view.HRADeduction).toBe(payrollScroll.HRADeduction)
    expect(view.HRA).toBe(payrollScroll.HRA)
    expect(view.DA).toBe(payrollScroll.DA)
    expect(view.SA).toBe(payrollScroll.SA)
    expect(view.OTA).toBe(payrollScroll.OTA)
    expect(view.EPFEmployee).toBe(payrollScroll.EPFEmployee)
    expect(view.EPFEmployer).toBe(payrollScroll.EPFEmployer)
    expect(view.loanRecovery).toBe(payrollScroll.loanRecovery)
    expect(view.CTC).toBe(payrollScroll.CTC)
    expect(view.totalDeduction).toBe(payrollScroll.totalDeduction)
    expect(view.netInHand).toBe(payrollScroll.netInHand)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
