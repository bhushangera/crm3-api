import { PayGrades } from '.'

let payGrades

beforeEach(async () => {
  payGrades = await PayGrades.create({ grade: 'test', annualIncrement: 'test', scale: 'test', HRA: 'test', DA: 'test', SA: 'test', LTA: 'test', ESI: 'test', EPFEmployee: 'test', EPFEmployer: 'test', DutyHours: 'test', Gratuity5yrs: 'test', Gratuity10yrs: 'test', OTA: 'test', CL: 'test', ELConversionFactor: 'test', ML: 'test', maternityLeave: 'test', RH: 'test', Days: 'test', weeklyOff: 'test', offAmount: 'test', RateHour: 'test', RateDay: 'test', weeklyHours: 'test', monthlyHours: 'test', FestiveBonus: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = payGrades.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(payGrades.id)
    expect(view.grade).toBe(payGrades.grade)
    expect(view.annualIncrement).toBe(payGrades.annualIncrement)
    expect(view.scale).toBe(payGrades.scale)
    expect(view.HRA).toBe(payGrades.HRA)
    expect(view.DA).toBe(payGrades.DA)
    expect(view.SA).toBe(payGrades.SA)
    expect(view.LTA).toBe(payGrades.LTA)
    expect(view.ESI).toBe(payGrades.ESI)
    expect(view.EPFEmployee).toBe(payGrades.EPFEmployee)
    expect(view.EPFEmployer).toBe(payGrades.EPFEmployer)
    expect(view.DutyHours).toBe(payGrades.DutyHours)
    expect(view.Gratuity5yrs).toBe(payGrades.Gratuity5yrs)
    expect(view.Gratuity10yrs).toBe(payGrades.Gratuity10yrs)
    expect(view.OTA).toBe(payGrades.OTA)
    expect(view.CL).toBe(payGrades.CL)
    expect(view.ELConversionFactor).toBe(payGrades.ELConversionFactor)
    expect(view.ML).toBe(payGrades.ML)
    expect(view.maternityLeave).toBe(payGrades.maternityLeave)
    expect(view.RH).toBe(payGrades.RH)
    expect(view.Days).toBe(payGrades.Days)
    expect(view.weeklyOff).toBe(payGrades.weeklyOff)
    expect(view.offAmount).toBe(payGrades.offAmount)
    expect(view.RateHour).toBe(payGrades.RateHour)
    expect(view.RateDay).toBe(payGrades.RateDay)
    expect(view.weeklyHours).toBe(payGrades.weeklyHours)
    expect(view.monthlyHours).toBe(payGrades.monthlyHours)
    expect(view.FestiveBonus).toBe(payGrades.FestiveBonus)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = payGrades.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(payGrades.id)
    expect(view.grade).toBe(payGrades.grade)
    expect(view.annualIncrement).toBe(payGrades.annualIncrement)
    expect(view.scale).toBe(payGrades.scale)
    expect(view.HRA).toBe(payGrades.HRA)
    expect(view.DA).toBe(payGrades.DA)
    expect(view.SA).toBe(payGrades.SA)
    expect(view.LTA).toBe(payGrades.LTA)
    expect(view.ESI).toBe(payGrades.ESI)
    expect(view.EPFEmployee).toBe(payGrades.EPFEmployee)
    expect(view.EPFEmployer).toBe(payGrades.EPFEmployer)
    expect(view.DutyHours).toBe(payGrades.DutyHours)
    expect(view.Gratuity5yrs).toBe(payGrades.Gratuity5yrs)
    expect(view.Gratuity10yrs).toBe(payGrades.Gratuity10yrs)
    expect(view.OTA).toBe(payGrades.OTA)
    expect(view.CL).toBe(payGrades.CL)
    expect(view.ELConversionFactor).toBe(payGrades.ELConversionFactor)
    expect(view.ML).toBe(payGrades.ML)
    expect(view.maternityLeave).toBe(payGrades.maternityLeave)
    expect(view.RH).toBe(payGrades.RH)
    expect(view.Days).toBe(payGrades.Days)
    expect(view.weeklyOff).toBe(payGrades.weeklyOff)
    expect(view.offAmount).toBe(payGrades.offAmount)
    expect(view.RateHour).toBe(payGrades.RateHour)
    expect(view.RateDay).toBe(payGrades.RateDay)
    expect(view.weeklyHours).toBe(payGrades.weeklyHours)
    expect(view.monthlyHours).toBe(payGrades.monthlyHours)
    expect(view.FestiveBonus).toBe(payGrades.FestiveBonus)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
