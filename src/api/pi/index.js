import { Router } from 'express'
import { middleware as query } from 'querymen'
import { middleware as body } from 'bodymen'
import { create, index, show, update, destroy } from './controller'
import { schema } from './model'
export Pi, { schema } from './model'

const router = new Router()
const {
  uuid,
  buId,
  sNo,
  originalSNo,
  // bu,
  entityId,
  entityCode,
  entityNotes,
  terms,
  quotationId,
  quotDate,
  scrollNo,
  validFor,
  validity,
  createdById,
  createdBy,
  type,
  origRefId,
  revisionNo,
  slug,
  stateId,
  state,
  statusId,
  status,
  pdNo,
  refEmpId,
  managerId,
  reportsToUUID,
  reportsTo,
  designerId,
  generateBy,
  dealId,
  leadId,
  campaignId,
  itemId,
  item, remarks,
  archive,
  partyId, isDealer,
  GSTIN,
  cartage,
  packing,
  installation,
  splDiscount,
  address,
  verifiedById,
  verifiedByUserId,
  verifiedAt,
  approvedById,
  approvedBy,
  approovedAt,
  includeTax,
  wwDiscount,
  bcDepth,
  wcDepth,
  bcHeight,
  wcHeight,
  woodworking,
  commercials,
  wallPackId, basePackId,
  // components,
  additional
} = schema.tree

router.post(
  '/',
  body({
    uuid,
    buId,
    sNo,
    originalSNo,
    // bu,
    entityId,
    entityCode,
    entityNotes,
    terms,
    quotationId,
    quotDate,
    scrollNo,
    validFor,
    validity,
    createdById,
    createdBy,
    type,
    origRefId,
    revisionNo,
    slug,
    stateId,
    state,
    statusId,
    status,
    pdNo,
    refEmpId,
    managerId,
    reportsToUUID,
    reportsTo,
    designerId,
    generateBy,
    dealId,
    leadId,
    campaignId,
    itemId,
    item,
    remarks,
    archive,
    partyId,
    isDealer,
    GSTIN,
    cartage,
    packing,
    installation,
    splDiscount,
    address,
    verifiedById,
    verifiedByUserId,
    verifiedAt,
    approvedById,
    approvedBy,
    approovedAt,
    includeTax,
    wwDiscount,
    bcDepth,
    wcDepth,
    bcHeight,
    wcHeight,
    woodworking,
    commercials,
    wallPackId,
    basePackId,
    // components,
    additional
  }),
  create
)

router.get('/', query(), index)

router.get('/:id', show)

router.put(
  '/:id',
  body({
    uuid,
    buId,
    sNo,
    originalSNo,
    // bu,
    entityId,
    entityCode,
    entityNotes,
    terms,
    quotationId,
    quotDate,
    scrollNo,
    validFor,
    validity,
    createdById,
    createdBy,
    type,
    origRefId,
    revisionNo,
    slug,
    stateId,
    state,
    statusId,
    status,
    pdNo,
    refEmpId,
    managerId,
    reportsToUUID,
    reportsTo,
    designerId,
    generateBy,
    dealId,
    leadId,
    campaignId,
    itemId,
    item,
    remarks,
    archive,
    partyId,
    isDealer,
    GSTIN,
    cartage,
    packing,
    installation,
    splDiscount,
    address,
    verifiedById,
    verifiedByUserId,
    verifiedAt,
    approvedById,
    approvedBy,
    approovedAt,
    includeTax,
    wwDiscount,
    bcDepth,
    wcDepth,
    bcHeight,
    wcHeight,
    woodworking,
    commercials,
    wallPackId,
    basePackId,
    // components,
    additional
  }),
  update
)

router.delete('/:id', destroy)

export default router
