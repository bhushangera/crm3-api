import { Ars } from '.'

let ars

beforeEach(async () => {
  ars = await Ars.create({ ARSCode: 'test', ARSDescription: 'test', ArticleId: 'test', MCCode: 'test', SMCCode: 'test', ArticleCode: 'test', ArticleDescription: 'test', BMId: 'test', BMCode.BMDescription: 'test', BMakeId: 'test', BMakeCode: 'test', BMakeImage: 'test', FMId: 'test', FMCode: 'test', FMDescription: 'test', FMakeId: 'test', FMakeImage: 'test', FMakeCode: 'test', FArticleId: 'test', FArticleCode: 'test', FArticleDescription: 'test', STDBack: 'test', VisibleBack: 'test', VBAddition: 'test', RATE: 'test', GST: 'test', slug: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = ars.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(ars.id)
    expect(view.ARSCode).toBe(ars.ARSCode)
    expect(view.ARSDescription).toBe(ars.ARSDescription)
    expect(view.ArticleId).toBe(ars.ArticleId)
    expect(view.MCCode).toBe(ars.MCCode)
    expect(view.SMCCode).toBe(ars.SMCCode)
    expect(view.ArticleCode).toBe(ars.ArticleCode)
    expect(view.ArticleDescription).toBe(ars.ArticleDescription)
    expect(view.BMId).toBe(ars.BMId)
    expect(view.BMCode.BMDescription).toBe(ars.BMCode.BMDescription)
    expect(view.BMakeId).toBe(ars.BMakeId)
    expect(view.BMakeCode).toBe(ars.BMakeCode)
    expect(view.BMakeImage).toBe(ars.BMakeImage)
    expect(view.FMId).toBe(ars.FMId)
    expect(view.FMCode).toBe(ars.FMCode)
    expect(view.FMDescription).toBe(ars.FMDescription)
    expect(view.FMakeId).toBe(ars.FMakeId)
    expect(view.FMakeImage).toBe(ars.FMakeImage)
    expect(view.FMakeCode).toBe(ars.FMakeCode)
    expect(view.FArticleId).toBe(ars.FArticleId)
    expect(view.FArticleCode).toBe(ars.FArticleCode)
    expect(view.FArticleDescription).toBe(ars.FArticleDescription)
    expect(view.STDBack).toBe(ars.STDBack)
    expect(view.VisibleBack).toBe(ars.VisibleBack)
    expect(view.VBAddition).toBe(ars.VBAddition)
    expect(view.RATE).toBe(ars.RATE)
    expect(view.GST).toBe(ars.GST)
    expect(view.slug).toBe(ars.slug)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = ars.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(ars.id)
    expect(view.ARSCode).toBe(ars.ARSCode)
    expect(view.ARSDescription).toBe(ars.ARSDescription)
    expect(view.ArticleId).toBe(ars.ArticleId)
    expect(view.MCCode).toBe(ars.MCCode)
    expect(view.SMCCode).toBe(ars.SMCCode)
    expect(view.ArticleCode).toBe(ars.ArticleCode)
    expect(view.ArticleDescription).toBe(ars.ArticleDescription)
    expect(view.BMId).toBe(ars.BMId)
    expect(view.BMCode.BMDescription).toBe(ars.BMCode.BMDescription)
    expect(view.BMakeId).toBe(ars.BMakeId)
    expect(view.BMakeCode).toBe(ars.BMakeCode)
    expect(view.BMakeImage).toBe(ars.BMakeImage)
    expect(view.FMId).toBe(ars.FMId)
    expect(view.FMCode).toBe(ars.FMCode)
    expect(view.FMDescription).toBe(ars.FMDescription)
    expect(view.FMakeId).toBe(ars.FMakeId)
    expect(view.FMakeImage).toBe(ars.FMakeImage)
    expect(view.FMakeCode).toBe(ars.FMakeCode)
    expect(view.FArticleId).toBe(ars.FArticleId)
    expect(view.FArticleCode).toBe(ars.FArticleCode)
    expect(view.FArticleDescription).toBe(ars.FArticleDescription)
    expect(view.STDBack).toBe(ars.STDBack)
    expect(view.VisibleBack).toBe(ars.VisibleBack)
    expect(view.VBAddition).toBe(ars.VBAddition)
    expect(view.RATE).toBe(ars.RATE)
    expect(view.GST).toBe(ars.GST)
    expect(view.slug).toBe(ars.slug)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
